# RSE Scheduler Orchestrator Docker Compose Configuration
# Provides complete development and production environment

version: '3.8'

services:
  # Main RSE Scheduler Orchestrator
  rse-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: rse-scheduler
    restart: unless-stopped
    ports:
      - "9090:9090"  # Metrics and health endpoint
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - API_TOKEN=${API_TOKEN}
      - WEBHOOK_TOKEN=${WEBHOOK_TOKEN}
      - PROMETHEUS_GATEWAY=${PROMETHEUS_GATEWAY:-http://prometheus:9090}
    volumes:
      - ./jobs.yaml:/app/jobs.yaml:ro
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For Docker-based jobs
    networks:
      - rse-network
    depends_on:
      - prometheus
      - grafana
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:9090/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: rse-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - rse-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.0.0
    container_name: rse-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - rse-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for job state persistence (optional)
  redis:
    image: redis:7-alpine
    container_name: rse-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-rse123}
    volumes:
      - redis-data:/data
    networks:
      - rse-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: rse-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./monitoring/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./monitoring/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - rse-network
    depends_on:
      - rse-scheduler
      - grafana
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log aggregation with Loki (optional)
  loki:
    image: grafana/loki:2.8.0
    container_name: rse-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    networks:
      - rse-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Promtail for log shipping (optional)
  promtail:
    image: grafana/promtail:2.8.0
    container_name: rse-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/rse-scheduler:ro
      - /var/log:/var/log:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - rse-network
    depends_on:
      - loki

# Development override service
  rse-scheduler-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: rse-scheduler-dev
    restart: "no"
    ports:
      - "9090:9090"
      - "9229:9229"  # Node.js debugging port
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=debug
      - DEBUG=rse-scheduler:*
    volumes:
      - .:/app
      - /app/node_modules
    command: ["npm", "run", "dev"]
    networks:
      - rse-network
    profiles:
      - dev

networks:
  rse-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  redis-data:
    driver: local
  loki-data:
    driver: local

# Health check for the entire stack
x-healthcheck-common: &healthcheck-common
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s