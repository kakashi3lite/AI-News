version: '3.8'

services:
  # Frontend Application
  frontend:
    build:
      context: ../..
      dockerfile: mlops/docker/Dockerfile
      target: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://api:8000
    depends_on:
      - api
      - redis
    networks:
      - ai-news-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main API Service
  api:
    build:
      context: ../..
      dockerfile: mlops/docker/Dockerfile
      target: inference
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://postgres:password@postgres:5432/newsdb
      - MONGODB_URL=mongodb://mongo:27017/newsdb
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - PROMETHEUS_GATEWAY=http://prometheus:9090
    depends_on:
      - redis
      - postgres
      - mongo
      - mlflow
    networks:
      - ai-news-network
    restart: unless-stopped
    volumes:
      - ./models:/home/mlops/models
      - ./logs:/home/mlops/logs
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # NLP Service
  nlp-service:
    build:
      context: ../..
      dockerfile: mlops/docker/Dockerfile
      target: inference
    ports:
      - "8080:8080"
    environment:
      - REDIS_URL=redis://redis:6379
      - PROMETHEUS_GATEWAY=http://prometheus:9090
    depends_on:
      - redis
    networks:
      - ai-news-network
    restart: unless-stopped
    volumes:
      - ./models:/home/mlops/models
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    command: ["python", "/home/mlops/app/mlops/nlp/advanced_news_nlp.py"]

  # Computer Vision Service
  cv-service:
    build:
      context: ../..
      dockerfile: mlops/docker/Dockerfile
      target: inference
    ports:
      - "8082:8082"
    environment:
      - REDIS_URL=redis://redis:6379
      - PROMETHEUS_GATEWAY=http://prometheus:9090
    depends_on:
      - redis
    networks:
      - ai-news-network
    restart: unless-stopped
    volumes:
      - ./models:/home/mlops/models
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    command: ["python", "/home/mlops/app/mlops/computer_vision/visual_news_ai.py"]

  # Training Service
  training:
    build:
      context: ../..
      dockerfile: mlops/docker/Dockerfile
      target: training
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - WANDB_MODE=offline
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mlflow
      - redis
    networks:
      - ai-news-network
    volumes:
      - ./models:/home/mlops/models
      - ./data:/home/mlops/data
      - ./logs:/home/mlops/logs
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    profiles:
      - training

  # Monitoring Service
  monitoring:
    build:
      context: ../..
      dockerfile: mlops/docker/Dockerfile
      target: monitoring
    ports:
      - "8081:8081"
    environment:
      - PROMETHEUS_URL=http://prometheus:9090
      - GRAFANA_URL=http://grafana:3000
    depends_on:
      - prometheus
      - grafana
    networks:
      - ai-news-network
    restart: unless-stopped
    volumes:
      - ./logs:/home/mlops/logs

  # Edge Computing Service
  edge:
    build:
      context: ../..
      dockerfile: mlops/docker/Dockerfile
      target: edge
    ports:
      - "8083:8083"
    environment:
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    networks:
      - ai-news-network
    restart: unless-stopped
    volumes:
      - ./models:/home/mlops/models
    profiles:
      - edge

  # Blockchain Service
  blockchain:
    build:
      context: ../..
      dockerfile: mlops/docker/Dockerfile
      target: blockchain
    ports:
      - "8084:8084"
    environment:
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    networks:
      - ai-news-network
    restart: unless-stopped
    profiles:
      - blockchain

  # Streaming Pipeline
  streaming:
    build:
      context: ../..
      dockerfile: mlops/docker/Dockerfile
      target: production
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_URL=redis://redis:6379
    depends_on:
      - kafka
      - redis
    networks:
      - ai-news-network
    restart: unless-stopped
    command: ["python", "/home/mlops/app/mlops/streaming/real_time_pipeline.py"]
    profiles:
      - streaming

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - ai-news-network
    restart: unless-stopped
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=newsdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    networks:
      - ai-news-network
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  # MongoDB Database
  mongo:
    image: mongo:6
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=newsdb
    networks:
      - ai-news-network
    restart: unless-stopped
    volumes:
      - mongo-data:/data/db

  # MLflow Tracking Server
  mlflow:
    image: python:3.10-slim
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://postgres:password@postgres:5432/mlflow
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=s3://mlflow-artifacts
    depends_on:
      - postgres
    networks:
      - ai-news-network
    restart: unless-stopped
    volumes:
      - mlflow-data:/mlflow
    command: >
      bash -c "pip install mlflow psycopg2-binary boto3 &&
               mlflow server --host 0.0.0.0 --port 5000
               --backend-store-uri postgresql://postgres:password@postgres:5432/mlflow
               --default-artifact-root /mlflow/artifacts"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    networks:
      - ai-news-network
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    networks:
      - ai-news-network
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana_dashboard.json:/var/lib/grafana/dashboards/dashboard.json
      - ./grafana-provisioning:/etc/grafana/provisioning

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    networks:
      - ai-news-network
    restart: unless-stopped
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    profiles:
      - logging

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - ai-news-network
    restart: unless-stopped
    profiles:
      - logging

  # Apache Kafka for Streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ai-news-network
    profiles:
      - streaming

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - ai-news-network
    profiles:
      - streaming

  # Jupyter Lab for Development
  jupyter:
    build:
      context: ../..
      dockerfile: mlops/docker/Dockerfile
      target: development
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
    networks:
      - ai-news-network
    volumes:
      - ../..:/home/mlops/workspace
      - jupyter-data:/home/mlops/.jupyter
    profiles:
      - development

  # MinIO for Object Storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    networks:
      - ai-news-network
    restart: unless-stopped
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    profiles:
      - storage

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - api
    networks:
      - ai-news-network
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    profiles:
      - production

networks:
  ai-news-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
  postgres-data:
  mongo-data:
  mlflow-data:
  prometheus-data:
  grafana-data:
  elasticsearch-data:
  jupyter-data:
  minio-data: