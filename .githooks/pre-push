#!/bin/sh
#
# Pre-push hook for AI News Dashboard
# Runs comprehensive checks before pushing to remote repository
#
# To install: 
# chmod +x .githooks/pre-push
# git config core.hooksPath .githooks
#

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
print_header() {
    echo "${BLUE}=== $1 ===${NC}"
}

print_success() {
    echo "${GREEN}✓ $1${NC}"
}

print_warning() {
    echo "${YELLOW}⚠ $1${NC}"
}

print_error() {
    echo "${RED}✗ $1${NC}"
}

print_info() {
    echo "${BLUE}ℹ $1${NC}"
}

# Get push information
REMOTE=$1
URL=$2

# Initialize error counter
ERRORS=0

print_header "AI News Dashboard Pre-Push Checks"
print_info "Remote: $REMOTE"
print_info "URL: $URL"

# Read the push information from stdin
while read local_ref local_sha remote_ref remote_sha; do
    # Skip if deleting a branch
    if [ "$local_sha" = "0000000000000000000000000000000000000000" ]; then
        print_info "Deleting branch $(echo $remote_ref | sed 's/refs\/heads\///')"
        continue
    fi
    
    # Extract branch names
    LOCAL_BRANCH=$(echo $local_ref | sed 's/refs\/heads\///')
    REMOTE_BRANCH=$(echo $remote_ref | sed 's/refs\/heads\///')
    
    print_info "Pushing $LOCAL_BRANCH to $REMOTE_BRANCH"
    
    # 1. Check if pushing to protected branches
    print_header "Checking branch protection"
    case $REMOTE_BRANCH in
        main|master)
            print_error "Direct push to $REMOTE_BRANCH is not allowed"
            print_info "Please create a pull request instead"
            ERRORS=$((ERRORS + 1))
            ;;
        develop)
            print_warning "Pushing to develop branch"
            print_info "Ensure this is an approved merge or hotfix"
            ;;
        release/*)
            print_info "Pushing to release branch: $REMOTE_BRANCH"
            ;;
        hotfix/*)
            print_warning "Pushing hotfix: $REMOTE_BRANCH"
            print_info "Ensure this addresses a critical issue"
            ;;
        *)
            print_success "Pushing to feature/bugfix branch: $REMOTE_BRANCH"
            ;;
    esac
    
    # 2. Check for force push
    if [ "$remote_sha" != "0000000000000000000000000000000000000000" ]; then
        # Check if this is a force push
        if ! git merge-base --is-ancestor $remote_sha $local_sha 2>/dev/null; then
            print_warning "Force push detected"
            print_info "This will rewrite history on the remote branch"
            
            # Extra protection for important branches
            case $REMOTE_BRANCH in
                main|master|develop)
                    print_error "Force push to $REMOTE_BRANCH is not allowed"
                    ERRORS=$((ERRORS + 1))
                    ;;
                *)
                    print_warning "Force push to $REMOTE_BRANCH - proceed with caution"
                    ;;
            esac
        fi
    fi
    
    # 3. Get list of commits being pushed
    if [ "$remote_sha" = "0000000000000000000000000000000000000000" ]; then
        # New branch - get all commits
        COMMITS=$(git rev-list $local_sha --not --remotes=origin)
    else
        # Existing branch - get new commits
        COMMITS=$(git rev-list $remote_sha..$local_sha)
    fi
    
    if [ -z "$COMMITS" ]; then
        print_info "No new commits to push"
        continue
    fi
    
    COMMIT_COUNT=$(echo "$COMMITS" | wc -l)
    print_info "Pushing $COMMIT_COUNT commit(s)"
    
    # 4. Validate commit messages
    print_header "Validating commit messages"
    INVALID_COMMITS=0
    
    for commit in $COMMITS; do
        MSG=$(git log --format=%s -n 1 $commit)
        
        # Skip merge commits
        if echo "$MSG" | grep -q "^Merge "; then
            continue
        fi
        
        # Check conventional commits format
        if ! echo "$MSG" | grep -qE '^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)(\([a-zA-Z0-9_-]+\))?: [a-z].{1,}$'; then
            print_warning "Invalid commit message: $MSG"
            INVALID_COMMITS=$((INVALID_COMMITS + 1))
        fi
    done
    
    if [ $INVALID_COMMITS -eq 0 ]; then
        print_success "All commit messages are valid"
    else
        print_warning "$INVALID_COMMITS commit(s) have invalid messages"
        print_info "Consider using interactive rebase to fix commit messages"
    fi
    
    # 5. Check for WIP commits
    print_header "Checking for WIP commits"
    WIP_COMMITS=$(git log --format=%s $remote_sha..$local_sha | grep -i "wip\|work in progress\|todo\|fixme" || true)
    if [ -n "$WIP_COMMITS" ]; then
        print_warning "WIP commits found:"
        echo "$WIP_COMMITS" | sed 's/^/  - /'
        print_info "Consider squashing WIP commits before pushing"
    else
        print_success "No WIP commits found"
    fi
    
    # 6. Check for large commits
    print_header "Checking commit sizes"
    LARGE_COMMITS=$(git log --format="%H %s" $remote_sha..$local_sha | while read commit_hash commit_msg; do
        CHANGES=$(git diff --stat $commit_hash^ $commit_hash | tail -1 | awk '{print $4}' | tr -d '()')
        if [ -n "$CHANGES" ] && [ "$CHANGES" -gt 500 ]; then
            echo "$commit_hash: $commit_msg ($CHANGES changes)"
        fi
    done)
    
    if [ -n "$LARGE_COMMITS" ]; then
        print_warning "Large commits found (>500 changes):"
        echo "$LARGE_COMMITS" | sed 's/^/  - /'
        print_info "Consider breaking large commits into smaller ones"
    else
        print_success "No unusually large commits found"
    fi
done

# 7. Run comprehensive tests if package.json exists
if [ -f "package.json" ]; then
    print_header "Running comprehensive test suite"
    
    # Check if we're in a CI environment
    if [ -n "$CI" ]; then
        print_info "CI environment detected, skipping local tests"
    else
        # Run linting
        if command -v npm > /dev/null 2>&1; then
            if npm list eslint > /dev/null 2>&1; then
                print_info "Running ESLint..."
                if npm run lint > /dev/null 2>&1; then
                    print_success "Linting passed"
                else
                    print_error "Linting failed"
                    ERRORS=$((ERRORS + 1))
                fi
            fi
            
            # Run type checking
            if [ -f "tsconfig.json" ] && npm list typescript > /dev/null 2>&1; then
                print_info "Running TypeScript type check..."
                if npx tsc --noEmit > /dev/null 2>&1; then
                    print_success "Type checking passed"
                else
                    print_error "Type checking failed"
                    ERRORS=$((ERRORS + 1))
                fi
            fi
            
            # Run tests
            print_info "Running test suite..."
            if npm test > /dev/null 2>&1; then
                print_success "All tests passed"
            else
                print_error "Tests failed"
                ERRORS=$((ERRORS + 1))
            fi
            
            # Run build
            print_info "Testing build process..."
            if npm run build > /dev/null 2>&1; then
                print_success "Build successful"
            else
                print_error "Build failed"
                ERRORS=$((ERRORS + 1))
            fi
        fi
    fi
fi

# 8. Security checks
print_header "Running security checks"

# Check for secrets in recent commits
SECRET_PATTERNS=(
    "password\s*=\s*['\"][^'\"]+['\"]" 
    "api[_-]?key\s*=\s*['\"][^'\"]+['\"]" 
    "secret\s*=\s*['\"][^'\"]+['\"]" 
    "token\s*=\s*['\"][^'\"]+['\"]" 
    "private[_-]?key" 
    "-----BEGIN.*PRIVATE.*KEY-----" 
    "sk_live_" 
    "pk_live_" 
    "AKIA[0-9A-Z]{16}" 
)

SECRETS_FOUND=false
for pattern in "${SECRET_PATTERNS[@]}"; do
    if git log -p --since="1 week ago" | grep -i "$pattern" > /dev/null 2>&1; then
        if [ "$SECRETS_FOUND" = false ]; then
            print_error "Potential secrets found in recent commits"
            SECRETS_FOUND=true
            ERRORS=$((ERRORS + 1))
        fi
    fi
done

if [ "$SECRETS_FOUND" = false ]; then
    print_success "No secrets detected in recent commits"
fi

# Run npm audit if available
if [ -f "package.json" ] && command -v npm > /dev/null 2>&1; then
    print_info "Running security audit..."
    if npm audit --audit-level moderate > /dev/null 2>&1; then
        print_success "No security vulnerabilities found"
    else
        print_warning "Security vulnerabilities detected"
        print_info "Run 'npm audit' for details"
    fi
fi

# 9. Check branch synchronization
print_header "Checking branch synchronization"

# Fetch latest changes
git fetch origin > /dev/null 2>&1

# Check if local branch is behind remote
if git rev-list --count HEAD..origin/$(git branch --show-current) > /dev/null 2>&1; then
    BEHIND_COUNT=$(git rev-list --count HEAD..origin/$(git branch --show-current))
    if [ $BEHIND_COUNT -gt 0 ]; then
        print_warning "Local branch is $BEHIND_COUNT commit(s) behind remote"
        print_info "Consider pulling latest changes before pushing"
    fi
fi

# Check if pushing to main/develop without being up to date with develop
CURRENT_BRANCH=$(git branch --show-current)
if [ "$CURRENT_BRANCH" != "develop" ] && [ "$CURRENT_BRANCH" != "main" ]; then
    if git show-ref --verify --quiet refs/remotes/origin/develop; then
        BEHIND_DEVELOP=$(git rev-list --count HEAD..origin/develop 2>/dev/null || echo "0")
        if [ $BEHIND_DEVELOP -gt 0 ]; then
            print_warning "Branch is $BEHIND_DEVELOP commit(s) behind develop"
            print_info "Consider rebasing with develop before pushing"
        fi
    fi
fi

# 10. Performance checks
print_header "Running performance checks"

# Check for large files
LARGE_FILES=$(git ls-tree -r -l HEAD | awk '$4 > 1048576 {print $5 " (" $4 " bytes)"}' || true)
if [ -n "$LARGE_FILES" ]; then
    print_warning "Large files found in repository:"
    echo "$LARGE_FILES" | sed 's/^/  - /'
    print_info "Consider using Git LFS for large files"
else
    print_success "No large files found"
fi

# Check repository size
REPO_SIZE=$(du -sh .git 2>/dev/null | cut -f1 || echo "unknown")
print_info "Repository size: $REPO_SIZE"

# 11. Documentation checks
print_header "Checking documentation"

# Check if README exists and is recent
if [ -f "README.md" ]; then
    README_AGE=$(git log -1 --format=%ct README.md 2>/dev/null || echo "0")
    CURRENT_TIME=$(date +%s)
    AGE_DAYS=$(( (CURRENT_TIME - README_AGE) / 86400 ))
    
    if [ $AGE_DAYS -gt 90 ]; then
        print_warning "README.md hasn't been updated in $AGE_DAYS days"
        print_info "Consider updating documentation"
    else
        print_success "README.md is up to date"
    fi
else
    print_warning "No README.md found"
fi

# Check for CHANGELOG updates
if [ -f "CHANGELOG.md" ]; then
    # Check if CHANGELOG has been updated recently
    CHANGELOG_AGE=$(git log -1 --format=%ct CHANGELOG.md 2>/dev/null || echo "0")
    CURRENT_TIME=$(date +%s)
    CHANGELOG_AGE_DAYS=$(( (CURRENT_TIME - CHANGELOG_AGE) / 86400 ))
    
    if [ $CHANGELOG_AGE_DAYS -gt 30 ]; then
        print_warning "CHANGELOG.md hasn't been updated in $CHANGELOG_AGE_DAYS days"
        print_info "Consider updating the changelog"
    else
        print_success "CHANGELOG.md is recent"
    fi
fi

# 12. Final summary and recommendations
print_header "Pre-push Summary"

if [ $ERRORS -eq 0 ]; then
    print_success "All critical checks passed! Safe to push."
    echo ""
    print_info "Push summary:"
    echo "  - Remote: $REMOTE"
    echo "  - URL: $URL"
    echo "  - All validations passed"
    echo ""
    print_info "Post-push recommendations:"
    echo "  - Monitor CI/CD pipeline status"
    echo "  - Check for any deployment issues"
    echo "  - Update project documentation if needed"
    echo "  - Notify team of significant changes"
else
    print_error "$ERRORS critical error(s) found. Push blocked."
    echo ""
    print_info "To fix issues:"
    echo "  - Review and fix the errors above"
    echo "  - Run tests locally: npm test"
    echo "  - Check code quality: npm run lint"
    echo "  - Verify build: npm run build"
    echo ""
    print_info "To bypass checks (not recommended):"
    echo "  git push --no-verify"
    echo ""
    print_error "Please fix the issues before pushing to maintain code quality."
    exit 1
fi

exit 0