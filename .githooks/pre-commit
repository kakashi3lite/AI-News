#!/bin/sh
#
# Pre-commit hook for AI News Dashboard
# Runs quality checks before allowing commits
#
# To install: 
# chmod +x .githooks/pre-commit
# git config core.hooksPath .githooks
#

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
print_header() {
    echo "${BLUE}=== $1 ===${NC}"
}

print_success() {
    echo "${GREEN}✓ $1${NC}"
}

print_warning() {
    echo "${YELLOW}⚠ $1${NC}"
}

print_error() {
    echo "${RED}✗ $1${NC}"
}

print_info() {
    echo "${BLUE}ℹ $1${NC}"
}

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    print_error "Not in a git repository"
    exit 1
fi

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
    print_warning "No staged files found"
    exit 0
fi

print_header "AI News Dashboard Pre-Commit Checks"
print_info "Checking $(echo "$STAGED_FILES" | wc -l) staged files..."

# Initialize error counter
ERRORS=0

# 1. Check for merge conflict markers
print_header "Checking for merge conflict markers"
CONFLICT_MARKERS=$(echo "$STAGED_FILES" | xargs grep -l "^<<<<<<< \|^======= \|^>>>>>>> " 2>/dev/null || true)
if [ -n "$CONFLICT_MARKERS" ]; then
    print_error "Merge conflict markers found in:"
    echo "$CONFLICT_MARKERS" | sed 's/^/  - /'
    ERRORS=$((ERRORS + 1))
else
    print_success "No merge conflict markers found"
fi

# 2. Check for TODO/FIXME comments in staged files
print_header "Checking for TODO/FIXME comments"
TODO_COMMENTS=$(echo "$STAGED_FILES" | xargs grep -n "TODO\|FIXME\|XXX\|HACK" 2>/dev/null || true)
if [ -n "$TODO_COMMENTS" ]; then
    print_warning "TODO/FIXME comments found:"
    echo "$TODO_COMMENTS" | sed 's/^/  - /'
    print_info "Consider resolving these before committing"
fi

# 3. Check for console.log statements in JavaScript/TypeScript files
print_header "Checking for console statements"
JS_TS_FILES=$(echo "$STAGED_FILES" | grep -E '\.(js|jsx|ts|tsx)$' || true)
if [ -n "$JS_TS_FILES" ]; then
    CONSOLE_LOGS=$(echo "$JS_TS_FILES" | xargs grep -n "console\." 2>/dev/null || true)
    if [ -n "$CONSOLE_LOGS" ]; then
        print_warning "Console statements found:"
        echo "$CONSOLE_LOGS" | sed 's/^/  - /'
        print_info "Consider removing console statements before committing"
    else
        print_success "No console statements found"
    fi
else
    print_info "No JavaScript/TypeScript files to check"
fi

# 4. Check for secrets and sensitive information
print_header "Checking for secrets and sensitive information"
SECRET_PATTERNS=(
    "password\s*=\s*['\"][^'\"]+['\"]" 
    "api[_-]?key\s*=\s*['\"][^'\"]+['\"]" 
    "secret\s*=\s*['\"][^'\"]+['\"]" 
    "token\s*=\s*['\"][^'\"]+['\"]" 
    "private[_-]?key" 
    "-----BEGIN.*PRIVATE.*KEY-----" 
    "sk_live_" 
    "pk_live_" 
    "AKIA[0-9A-Z]{16}" 
    "[0-9a-f]{32}" 
)

SECRETS_FOUND=false
for pattern in "${SECRET_PATTERNS[@]}"; do
    MATCHES=$(echo "$STAGED_FILES" | xargs grep -i -n "$pattern" 2>/dev/null || true)
    if [ -n "$MATCHES" ]; then
        if [ "$SECRETS_FOUND" = false ]; then
            print_error "Potential secrets found:"
            SECRETS_FOUND=true
        fi
        echo "$MATCHES" | sed 's/^/  - /'
    fi
done

if [ "$SECRETS_FOUND" = true ]; then
    ERRORS=$((ERRORS + 1))
    print_error "Please remove sensitive information before committing"
else
    print_success "No secrets detected"
fi

# 5. Check file sizes
print_header "Checking file sizes"
MAX_FILE_SIZE=1048576  # 1MB in bytes
LARGE_FILES=$(echo "$STAGED_FILES" | xargs ls -la 2>/dev/null | awk -v max="$MAX_FILE_SIZE" '$5 > max {print $9 " (" $5 " bytes)"}' || true)
if [ -n "$LARGE_FILES" ]; then
    print_warning "Large files found (>1MB):"
    echo "$LARGE_FILES" | sed 's/^/  - /'
    print_info "Consider using Git LFS for large files"
else
    print_success "No large files found"
fi

# 6. Check for binary files
print_header "Checking for binary files"
BINARY_FILES=$(echo "$STAGED_FILES" | xargs file 2>/dev/null | grep -v "text" | grep -v "empty" | cut -d: -f1 || true)
if [ -n "$BINARY_FILES" ]; then
    print_warning "Binary files found:"
    echo "$BINARY_FILES" | sed 's/^/  - /'
    print_info "Ensure binary files are necessary and properly tracked"
else
    print_success "No unexpected binary files found"
fi

# 7. Run linting if package.json exists
if [ -f "package.json" ]; then
    print_header "Running ESLint"
    
    # Check if ESLint is available
    if command -v npx > /dev/null 2>&1 && npm list eslint > /dev/null 2>&1; then
        LINT_FILES=$(echo "$JS_TS_FILES" | tr '\n' ' ')
        if [ -n "$LINT_FILES" ]; then
            if npx eslint $LINT_FILES --max-warnings 0; then
                print_success "ESLint passed"
            else
                print_error "ESLint failed"
                ERRORS=$((ERRORS + 1))
            fi
        else
            print_info "No JavaScript/TypeScript files to lint"
        fi
    else
        print_warning "ESLint not available, skipping lint check"
    fi
    
    # 8. Run Prettier check
    print_header "Checking code formatting"
    if command -v npx > /dev/null 2>&1 && npm list prettier > /dev/null 2>&1; then
        PRETTIER_FILES=$(echo "$STAGED_FILES" | grep -E '\.(js|jsx|ts|tsx|json|css|scss|md)$' | tr '\n' ' ' || true)
        if [ -n "$PRETTIER_FILES" ]; then
            if npx prettier --check $PRETTIER_FILES; then
                print_success "Code formatting is correct"
            else
                print_error "Code formatting issues found"
                print_info "Run 'npm run format' to fix formatting"
                ERRORS=$((ERRORS + 1))
            fi
        else
            print_info "No files to check formatting"
        fi
    else
        print_warning "Prettier not available, skipping format check"
    fi
    
    # 9. Run TypeScript type checking
    if [ -f "tsconfig.json" ]; then
        print_header "Running TypeScript type check"
        if command -v npx > /dev/null 2>&1 && npm list typescript > /dev/null 2>&1; then
            if npx tsc --noEmit; then
                print_success "TypeScript type check passed"
            else
                print_error "TypeScript type check failed"
                ERRORS=$((ERRORS + 1))
            fi
        else
            print_warning "TypeScript not available, skipping type check"
        fi
    fi
    
    # 10. Run tests for changed files
    print_header "Running tests"
    if command -v npm > /dev/null 2>&1; then
        # Check if there are test files in staged files
        TEST_FILES=$(echo "$STAGED_FILES" | grep -E '\.(test|spec)\.(js|jsx|ts|tsx)$' || true)
        if [ -n "$TEST_FILES" ] || [ -n "$JS_TS_FILES" ]; then
            if npm run test -- --passWithNoTests --findRelatedTests $STAGED_FILES 2>/dev/null; then
                print_success "Tests passed"
            else
                print_error "Tests failed"
                ERRORS=$((ERRORS + 1))
            fi
        else
            print_info "No test files to run"
        fi
    else
        print_warning "npm not available, skipping tests"
    fi
else
    print_info "No package.json found, skipping Node.js checks"
fi

# 11. Check commit message format (if available)
if [ -f ".gitmessage" ]; then
    print_header "Commit message template available"
    print_info "Use 'git commit' (without -m) to use the template"
    print_info "Follow Conventional Commits format: type(scope): description"
fi

# 12. Check for package-lock.json consistency
if [ -f "package.json" ] && [ -f "package-lock.json" ]; then
    print_header "Checking package-lock.json consistency"
    PACKAGE_CHANGED=$(echo "$STAGED_FILES" | grep "package.json" || true)
    LOCK_CHANGED=$(echo "$STAGED_FILES" | grep "package-lock.json" || true)
    
    if [ -n "$PACKAGE_CHANGED" ] && [ -z "$LOCK_CHANGED" ]; then
        print_warning "package.json changed but package-lock.json not updated"
        print_info "Run 'npm install' to update package-lock.json"
    elif [ -z "$PACKAGE_CHANGED" ] && [ -n "$LOCK_CHANGED" ]; then
        print_warning "package-lock.json changed but package.json unchanged"
        print_info "This might indicate a dependency issue"
    else
        print_success "Package files are consistent"
    fi
fi

# 13. Security audit
if [ -f "package.json" ] && command -v npm > /dev/null 2>&1; then
    print_header "Running security audit"
    if npm audit --audit-level moderate > /dev/null 2>&1; then
        print_success "No security vulnerabilities found"
    else
        print_warning "Security vulnerabilities detected"
        print_info "Run 'npm audit' for details and 'npm audit fix' to resolve"
    fi
fi

# 14. Check for environment files
print_header "Checking for environment files"
ENV_FILES=$(echo "$STAGED_FILES" | grep -E '\.env' || true)
if [ -n "$ENV_FILES" ]; then
    print_error "Environment files found in staged changes:"
    echo "$ENV_FILES" | sed 's/^/  - /'
    print_error "Environment files should not be committed"
    ERRORS=$((ERRORS + 1))
else
    print_success "No environment files found"
fi

# 15. Final summary
print_header "Pre-commit Summary"
if [ $ERRORS -eq 0 ]; then
    print_success "All checks passed! Ready to commit."
    echo ""
    print_info "Staged files:"
    echo "$STAGED_FILES" | sed 's/^/  - /'
    echo ""
    print_info "Remember to:"
    echo "  - Write a clear commit message"
    echo "  - Follow Conventional Commits format"
    echo "  - Reference related issues if applicable"
    exit 0
else
    print_error "$ERRORS error(s) found. Please fix before committing."
    echo ""
    print_info "To bypass these checks (not recommended):"
    echo "  git commit --no-verify"
    echo ""
    print_info "To fix common issues:"
    echo "  - Format code: npm run format"
    echo "  - Fix linting: npm run lint:fix"
    echo "  - Run tests: npm test"
    echo "  - Security audit: npm audit fix"
    exit 1
fi