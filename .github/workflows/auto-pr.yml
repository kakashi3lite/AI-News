name: Auto PRs for feature branches

on:
  push:
    branches:
      - chore/ci-playwright-context
      - feat/ios-context-saving
      - feat/ios-env-scoped-store
      - chore/e2e-api-auth-meta

jobs:
  open-or-update-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create or update PR
        uses: actions/github-script@v7
        with:
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            const prTitleMap = {
              'chore/ci-playwright-context': 'chore(ci): add Playwright context-saving docs, tests, and workflow',
              'feat/ios-context-saving': 'feat(ios): add AINewsKit Swift package and iOS context-saving docs',
              'feat/ios-env-scoped-store': 'feat(ios): environment-scoped token store + session metadata and migration',
              'chore/e2e-api-auth-meta': 'feat(e2e): API-driven auth with env/role-scoped storage + metadata + CI pruning'
            };
            const prBodyMap = {
              'chore/ci-playwright-context': `Adds Playwright context saving: role-based storageState with TTL, env-driven config, auto webServer, artifacts. Usage and security documented.`,
              'feat/ios-context-saving': `Secure iOS context saving with AINewsKit: TokenStore, AuthClient, APIClient, docs. Keychain-only, no token logs.`,
              'feat/ios-env-scoped-store': `Adds EnvironmentScopedTokenStore and SessionMetadata. Per-env sessions, migration from legacy store, drift-ready. Docs updated.`,
              'chore/e2e-api-auth-meta': `API-driven login, env/role-scoped storage files with <file>.meta.json sidecar (claimsHash, timestamps), CI pruning, /api/v1/auth/me stub.`
            };

            const title = prTitleMap[branch] || `Automated PR for ${branch}`;
            const body = prBodyMap[branch] || 'Automated PR opened by auto-pr workflow.';

            const { data: prs } = await github.rest.pulls.list({ owner: context.repo.owner, repo: context.repo.repo, head: `${context.repo.owner}:${branch}`, state: 'open' });
            if (prs.length > 0) {
              const pr = prs[0];
              await github.rest.pulls.update({ owner: context.repo.owner, repo: context.repo.repo, pull_number: pr.number, title, body });
            } else {
              await github.rest.pulls.create({ owner: context.repo.owner, repo: context.repo.repo, title, body, head: branch, base: 'main' });
            }

      - name: Label PR
        uses: actions/github-script@v7
        with:
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            const labels = branch.startsWith('feat/ios') ? ['ios','context-saving','feat'] : ['ci','e2e','context-saving'];
            const { data: prs } = await github.rest.pulls.list({ owner: context.repo.owner, repo: context.repo.repo, head: `${context.repo.owner}:${branch}`, state: 'open' });
            if (prs.length === 0) return;
            await github.rest.issues.addLabels({ owner: context.repo.owner, repo: context.repo.repo, issue_number: prs[0].number, labels });

